#!/usr/bin/env perl
use warnings;
use strict;
use open qw(locale);
our $PROGNAME = basename($0);

use FindBin;
use lib "${FindBin::Bin}/../lib";

use My::Git::VGraph::Parser;
use File::Basename qw(basename);
use POSIX qw(dup2);

our %options;
our @gitCmd = ('git', 'log', '--parents', '--color=always');

use Getopt::Long;
Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case');
Getopt::Long::GetOptions(
    'all'               => sub { push(@gitCmd, '--all');                                              },
    'decorate:s'        => sub { push(@gitCmd, '--decorate'); $gitCmd[-1] .= "=$_[1]" if $_[1] ne ''; },
    'no-decorate'       => sub { push(@gitCmd, '--no-decorate');                                      },
    'date-order'        => sub { push(@gitCmd, '--date-order');                                       },
    'author-date-order' => sub { push(@gitCmd, '--author-date-order');                                },
    'topo-order'        => sub { push(@gitCmd, '--topo-order');                                       },
    'pretty:s'          => sub { push(@gitCmd, '--pretty');   $gitCmd[-1] .= "=$_[1]" if $_[1] ne ''; },
    'format=s'          => sub { push(@gitCmd, '--format');   $gitCmd[-1] .= "=$_[1]";                },
    'abbrev-commit'     => sub { push(@gitCmd, '--abbrev-commit');                                    },
    'no-abbrev-commit'  => sub { push(@gitCmd, '--no-abbrev-commit');                                 },
    'oneline'           => sub { push(@gitCmd, '--oneline');                                          },
    'date=s'            => sub { push(@gitCmd, '--date');     $gitCmd[-1] .= "=$_[1]";                },
    'name-status'       => sub { push(@gitCmd, '--name-status');                                      },
    'graph'             => sub { }, # no effect

    # special handling
    'parents'           => sub { $options{parents} = 1; },
    'abbrev:s'          => sub { push(@gitCmd, '--abbrev'); $gitCmd[-1] .= "=$_[1]" if $_[1] ne ''; },

    # our options
    'adog|goad'         => sub { push(@gitCmd, '--oneline', '--all', '--decorate'); },
    'priority-fight'    => sub { $options{strategy} = 'priority-fight'; },
    'leftmost-column'   => sub { $options{strategy} = 'leftmost-column'; },
    'narrow'            => sub { $options{colSep} = 2; },
    'stdin'             => sub { $options{stdin} = 1; },
    'help'              => sub { usage(); exit(0); },
) or die("Type '$PROGNAME --help' for help.\n");

sub usage { print(<<"END"); }
usage: ${PROGNAME} [<option> ...]
    --adog, --goad   sets --oneline, --all, --decorate
    --stdin          read git log --parents output from stdin
    --help           print this message
git-log(1) options accepted:
    --all
    --decorate[=<short|full|auto|no>], --no-decorate
    --date-order, --author-date-order, --topo-order
    --pretty[=<format>], --format=<format>, --oneline
    --abbrev-commit, --no-abbrev-commit
    --date=<format>
    --name-status
    --abbrev[=<n>]
    --parents
    --graph (has no effect)
END

my $g = My::Git::VGraph::Parser->new(options => \%options);

STDOUT->autoflush(1);
STDERR->autoflush(1);

# Let's pipe our own output through a pager.
if (-t fileno(\*STDOUT)) {
    my $pager = $ENV{GIT_VGRAPH_PAGER} // $ENV{GIT_PAGER} // $ENV{PAGER} // 'less';
    my ($childIn, $parentOut);
    pipe($childIn, $parentOut) or die("pipe: $!");
    my $pid = fork();
    die("fork: $!") if !defined $pid;
    if ($pid) {
        dup2(fileno($childIn), 0) or die("dup2: $!");
        exec($pager) or die("exec: $!");
    }
    dup2(fileno($parentOut), 1) or die("dup2: $!");
    $g->{options}->{isPaging} = 1;
}

if ($options{stdin}) {
    while (<>) {
        $g->parseLine($_);
    }
    $g->eof();
} else {
    push(@gitCmd, @ARGV);
    my $ph;
    open($ph, '-|', @gitCmd) or die("unable to execute git log: $!\n");
    while (<$ph>) {
        $g->parseLine($_);
    }
    $g->eof();
}

=head1 NAME

git-vgraph - alternative to git-graph(1)

=head1 SYNOPSIS

B<git vgraph>
S<[B<--all>]>
S<[B<--decorate>[B<=short>|B<full>|B<auto>|B<no>]]>
S<[B<--no-decorate>]>
S<[B<--date-order>]>
S<[B<--author-date-order>]>
S<[B<--topo-order>]>
S<[B<--pretty>[B<=>I<format>]]>
S<[B<--format=>I<format>]>
S<[B<--oneline>]>
S<[B<--abbrev-commit>]>
S<[B<--no-abbrev-commit>]>
S<[B<--date=>I<format>]>
S<[B<--name-status>]>
S<[B<--abbrev>[B<=>I<n>]]>
S<[B<--adog>|B<--goad>]>
S<[B<-->]>
S<[I<arguments> ...]>

B<git log --parents ... | git vgraph>
S<[B<option> ...]>
B<--stdin>
S<[I<arguments> ...]>

=head1 DESCRIPTION

I've never liked C<git log --graph>'s output.  Mainly, in that the
branches shift to the left and to the right all the time.  This makes
it more difficult to follow along when scanning up and down.

C<git vgraph> provides an alternative that attempts to keep branches
on the same column, making them easier to scan up and down.
Sometimes, master/main or a branch has to shift to another column
though, this cannot be avoided 100% of the time.

This style of output does come at the expense of shifting the C<git
log> text to the right a bit more than C<git log --graph>.

=head1 OPTIONS

=over 4

=item --adog, --goad

Turns on the C<--all>, C<--decorate>, and C<--oneline> options.

The "g" stands for C<--graph>, which is ignored by git-vgraph, on
account of it always displays a graph.

=item --stdin

Instructs git-vgraph to read C<git log --parents> output from stdin,
instead of executing C<git log>.  Escape sequences are recognized and
accounted for.

For C<git vgraph> to render a graph, C<git log> must have be executed
with the C<--parents> option specified.

NOTE: In this mode, none of the C<git log> options this program
accepts have any effect.

=back

=head1 GIT LOG OPTIONS ACCEPTED

C<git-vgraph> does not accept all C<git log> options.  Presently it
processes the following, simply passing many of them along to C<git
log>:

    --all
    --decorate[=<short|full|auto|no>]
    --no-decorate
    --date-order
    --author-date-order
    --topo-order
    --pretty[=<format>]
    --format=<format>
    --oneline
    --abbrev-commit
    --no-abbrev-commit
    --date=<format>
    --name-status
    --abbrev[=<n>]
    --parents

    --graph (has no effect)

You may pass additional options to C<git log> by specifying the C<-->
parameter which stops C<git vgraph> from processing options.  For
example, C<git vgraph> does not itself process C<git log>'s
C<--log-size> option, but you can pass it to C<git log> via the
following:

    git vgraph --all --oneline --decorate -- --log-size

=head1 BUGS

C<git-vgraph> may fail to parse a line containing a commit id and its
parent ids properly if the commit log message's first line starts with
a ticket number B<and all> of the following conditions are true:

=over 4

=item *

The ticket number starts with at least as many hex digits as
abbreviated commit ids do.

=item *

C<--oneline> or an equivalent is specified, either to this program
directly (which passes it along), or when running L<git-log> to
generate the output fed to this program.

=back

=head1 AUTHOR

Darren Embry C<dsembry@gmail.com>

=head1 LICENSE

C<git vgraph> is released under the GNU General Public License version
2.0 --- the same terms as Git itself.

https://opensource.org/licenses/GPL-2.0

=cut
